= slide 'Днес' do
  list:
    Наследяване
    Ancestor chain
    Именовани пространства


= slide 'Наследяване' do
  p Наследяването в Ruby става така:

  annotate:
    class Person
      def name() 'The Doctor' end
    end

    class PolitePerson < Person
      def introduction
        "Hi, I am #{name}"
      end
    end

    PolitePerson.new.introduction # =>

= slide 'Наследяване', 'ограничения' do
  list:
    Може да наследите най-много от един родител
    В наследника имате достъп до всички методи
    В наследника имате достъп до всички полета
    Ако не определите родител, класът наследява от `Object`
    Всеки клас в Ruby наследява от `Object`

= slide 'private методи' do
  p Имате достъп до <code>private</code> методите:

  annotate:
    class Person
      private
      def name() 'The Doctor' end
    end

    class PolitePerson < Person
      def introduction() "Hi, I am #{name}" end
    end

    PolitePerson.new.introduction # =>

= slide 'Наследяване', '#kind_of? и #instance_of?' do
  annotate:
    class Base; end
    class SpaceStation < Base; end

    base    = Base.new
    station = SpaceStation.new

    base.kind_of? Base            # =>
    station.kind_of? SpaceStation # =>
    station.kind_of? Base         # =>

    base.instance_of? Base            # =>
    station.instance_of? SpaceStation # =>
    station.instance_of? Base         # =>

= slide 'Наследяване', '#kind_of? и #instance_of? (2)' do
  ul
    li Ползвайте <code>#kind_of?</code> по принцип.
    li Ползвайте <code>#instance_of?</code> само когато искате да не бъде наследник.
    li Гледайте да не ги ползвате въобще &mdash; duck typing

= slide 'super' do
  p Може да предефинирате метод и да извикате родителския със <code>super</code>

  annotate:
    class Person
      def introduction_to(other)
        "Hello #{other}."
      end
    end

    class PolitePerson < Person
      def introduction_to(other)
        super("Mr. #{other}") + " How do you do?"
      end
    end

    queen = PolitePerson.new
    queen.introduction_to('Smith') # =>

= slide 'super (2)' do
  p Ако извикате <code>super</code> без скоби родителския метод получава същите аргументи.

  annotate:
    class Person
      def introduction_to(other)
        "Hello #{other}."
      end
    end

    class PolitePerson < Person
      def introduction_to(other)
        super + " How do you do?"
      end
    end

    queen = PolitePerson.new
    queen.introduction_to('Smith') # =>

= slide 'super (3)' do
  p <code>super</code> и <code>super()</code> са различни:

  annotate:
    class Person
      def introduction_to(other)
        "Hello #{other}."
      end
    end

    class PolitePerson < Person
      def introduction_to(other)
        super() + " How do you do?"
      end
    end

    queen = PolitePerson.new
    queen.introduction_to('Smith') #!

= slide 'Ancestor chain' do
  list:
    Методи могат да се дефинират само в класове и модули
    Всеки клас има родител и миксирани модули
    Ако един метод не се намери в класът, той се търси в миксираните модули
    Модулите се претърсват обратно на реда, в който са `include`-нати
    Ако не се намери в тях се търси в родителя
    Ако го няма там, се търси в неговите модули и после в неговия родител
    Рекурсия, брат
    Този списък от модули и класове в които се търси се нарича `ancestor chain`

= slide 'Ancestor chain (2)' do
  annotate:
    module Foo; end
    module Bar; end
    module Qux; end

    class Base
      include Foo
    end

    class Derived < Base
      include Bar
      include Qux
    end

    Derived.ancestors # =>

= slide 'Ancestor chain (3)', 'модули, миксирани в други модули' do
  annotate:
    module Foo; end
    module Bar; end

    module Qux
      include Foo
      include Bar
    end

    class Thing
      include Qux
    end

    Thing.ancestors # =>

= slide 'Ancestor chain (4)' do
  p Има само една версия на метода:

  annotate:
    module Talking
      def greeting() "Hello, #{name}" end
    end

    class Base
      include Talking
      def name()        'Base'   end
      def say_hi_base() greeting end
    end

    class Derived < Base
      include Talking
      def name()           'Derived' end
      def say_hi_derived() greeting  end
    end

    derived = Derived.new
    derived.say_hi_base    # =>
    derived.say_hi_derived # =>

= slide 'Основните класове в Ruby' do
  list:
    Всичко наследява от `Object`
    `Kernel` е миксиран в `Object`
    "Глобалните методи" са дефинирани в `Kernel` (`#puts`, `#eval` и т.н.)
    Общите методи за всички инстанции са в `Object` (`#inspect`, `#tap`, `#methods` и т.н.)
    `BasicObject` е минималистичен клас, подходящ за проксита
    Ако дефинирате методи извън модул или клас, той отива като private метод на `Object`
    Всеки път като правите това, котенце някъде умира
    Не го правете в домашните. Или в проектите. Или където и да е.

= slide 'protected' do
  p Само обекти от същия клас могат да викат protected методи

  annotate:
    class Vector
      def initialize(x, y) @x, @y = x, y          end
      def inspect()        "Vector.new(#@x, #@y)" end

      def +(other)
        Vector.new(*coords.zip(other.coords).map { |a, b| a + b })
      end

      protected
      def coords() [@x, @y] end
    end

    vector = Vector.new(1, 2) + Vector.new(3, 4)
    vector        # =>
    vector.coords #!

= slide 'private и protected', 'още известни като Private Public и General Specific' do
  list:
    `private` се ползва постоянно.
    `protected` почти никога.
    Аз съм ползвал `protected` веднъж.
    Има school of thought, който предпочита `protected`, защото могат да се викат с `self.` отпред.
    Ние не сме от него.
    Има и `public`. Не го ползваме, а просто слагаме публичните методи отгоре.
    Впрочем, не са ключови думи а методи на `Module` и `Class`.
    How do you like them bananas?

= slide 'Именовани пространства' do
  p Класовете и модулите могат да служат като именовани пространства.

  annotate:
    module Useless
      class Thing
      end
    end

    class Grandfather
      class StraightRazor
      end
    end

    Useless::Thing.new             # =>
    Grandfather::StraightRazor.new # =>

= slide 'Именовани пространства (2)' do
  p Ако се намирате в модул, няма нужда да квалицирате константите:

  annotate:
    module Useless
      class Thing
      end

      Thing.new         # =>
    end

    Useless::Thing.new  # =>
    Thing.new           #!

= slide 'Търсене на променливи в Ruby' do
  ul
    li Променливите в Ruby се търсят лексикално, докато не се стигне до "scope gate".
    li Scope gate-ове бяха <code>def</code>, <code>module</code> и <code>class</code>
    li Важи и за полета (<code>@foo</code>)

  annotate:
    bacon = 2

    def foo
      chunky = 10

      1.times do
        chunky       # =>
        chunky = 44
      end

      chunky         # =>
      bacon          #!
    end

    foo()

= slide 'Правила за търсене на константи' do
  list:
    Константите и променливите в Ruby се търсят по различен начин
    Константите са организирани в дървовидна структура
    Всеки ред код се намира някъде в тази дървовидна структура
    Когато напишете константа, тя се търси първо в текущия клон, след което в родителите
    `module` и `class` ви местят из дървото на константите
    Може да достъпите константа в "корена" с `::` отпред (`::Foo`)

= slide 'Малък пример' do
  annotate:
    PLACE = 'root'
    module Outer
      PLACE = 'intermediate'
      module Inner
        PLACE = 'deep'
      end
    end

    PLACE               # =>
    Outer::Inner::PLACE # =>
    module Outer
      module Inner
        PLACE           # =>
        ::PLACE         # =>
      end
      PLACE             # =>
      Inner::PLACE      # =>
    end

= slide 'Класови методи' do
  p Може да дефинирате класови методи така:

  annotate:
    class Something
      def Something.answer
        42
      end
    end

    Something.answer   # =>

= slide 'Класови методи (2)' do
  p Не може да ги неквалифицирано викате от инстанцията:

  annotate:
    class Something
      def Something.answer
        42
      end

      def do_stuff
        answer             #!
        Something.answer   # =>
      end
    end

    thing = Something.new
    thing.answer           #!
    Something.answer       # =>

    something.do_stuff

= slide 'Класови методи (3)' do
  p Не са достъпни и в наследниците

  annotate:
    class Base
      def Base.answer() 42 end
    end

    class Derived
      def Derived.say_answer
        answer         #!
        Base.answer    # =>
      end
    end

    Derived.answer     #!
    Base.answer        # =>

    Derived.say_answer

= slide 'Класови методи (4)' do
  list:
    Имат доста оплетена семантика в Ruby
    Показах ви как се дефинират и викат
    Не ви показах как са реализирани и къде стоят
    Сериозно, оплетено е
    Засега се опитвайте да не ползвате класови методи
