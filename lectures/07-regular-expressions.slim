= slide 'Днес' do
  list:
    Регулярните изрази в бита на програмиста
    Регулярните изрази в Ruby (1.9.3)
    Как да ги ползваме в Ruby код
    Преди това, две дребни задачки, за да не ви е скучно

= slide 'Традиционната задача', 'за тези от вас, които се чувстват комфортно с РИ' do
  p Имаме следната задача:
  blockquote
    | Да се напише кратък Ruby expression, който проверява дали дадено число е просто или не,
      посредством употреба на регулярен израз. Резултатът от изпълнението му трябва да е <code>true</code>
      за прости числа и <code>false</code> за всички останали. Неща, които можете да ползвате:
    list:
      Самото число, разбира се.
      Произволни методи от класа `Regexp`
      Подходящ регулярен израз (шаблон)
      Текстовия низ `'1'`.
      `String#*`.
      Някакъв условен оператор (например `if`-`else` или `? … : …`)
      `true`, `false`, ...

= slide 'Нетрадиционната задача', 'за тези от вас, които вече ни знаят номерата' do
  p Имаме следната задача:
  blockquote
    | Да валидирате изрази от следния тип за правилно отворени/затворени скоби:
    list:
      `(car (car (car ...)))`
      Например: `(car (car (car (car list))))`
      Целта е израз, чиито резултат да може да се ползва в условен оператор (`true`/`false`-еквивалент)
      Можете да ползвате произволни методи от класа `Regexp`
      И регулярен израз, разбира се
  p.action Материалът, необходим за решаването и на двете задачи, ще го има изцяло в днешната лекция.

= slide 'Произход', 'малко обща култура' do
  list:
    На възраст над 60 години (Клини)
    Practical Extraction and Report Language
    Perl и PCRE-библиотеката (Perl-Compatible Regular Expressions)
    Почти всеки general-purpose програмен език имплементира някаква форма на РИ
    Незаменими unix-програми като `grep`, `sed`, `awk`, `vi`, `Emacs`...
    Разглеждат се дори в курса по ДМ покрай граматики и автомати

= slide 'Проблемна област', 'най-общо: работа с текстови низове' do
  list:
    Търсене на по-сложна последователност от символи в низ
    Заместване на такива последователности с нещо друго
    Изобщо, модифициране на текстови последователности (например, Markdown към HTML)
    Проверка дали даден низ отговаря на определени условия (валидация)
    Проверка дали едно число е просто или не :)

= slide 'Понятия', 'и терминология' do
  list:
    „шаблон“, още „регулярен израз“ (pattern)
    Специални символи (meta characters)
    Екраниране на специалните символи (escape-ване)
    Повторители и повторение (quantifiers and repetition)
    Класове от символи (character classes)
    Групи

= slide 'Шаблони', '(регулярни изрази, patterns и т.н.)' do
  list:
    Всеки регулярен израз е инстанция на класа `Regexp`
    Има литерален синтаксис за създаване на регулярни изрази: `/pattern/`
    Може да се ползва и синтаксисът с `%r`, например: `%r{/path/maching/made/easy}`

= slide 'Специални символи', 'meta characters' do
  list:
    TODO

= slide 'Екраниране', 'на специалните символи (escape-ване)' do
  list:
    TODO

= slide 'Повторители', '(quantifiers)' do
  list:
    TODO

= slide 'Класове от символи', '(character classes)' do
  list:
    TODO

= slide 'Групи' do
  list:
    TODO

= slide 'Unicode' do
  list:
    Регулярните изрази в Ruby 1.9 носят кодировката на сорс-кода; ако кодът е UTF-8, и те са UTF-8
    Можете да проверите кодировката на даден регулярен израз с `Regexp#encoding`
    Можете да укажете изрична кодировка посредством модификатор; например `/something/u` за `UTF-8`
    Малък пример:
  blockquote.action
    | Rubyのお父さんはまつもとゆきひろさんです。
  div.action
    annotate:
      unicode_test = 'Rubyのお父さんはまつもとゆきひろさんです。'

      if unicode_test =~ /は([[:alpha:]]+)さん/
        [$1, $1.size, $1.encoding] # ['まつもとゆきひろ', 8, #<Encoding:UTF-8>]
      end

= slide 'Решение на проблема, поставен днес', 'проверка за просто число с РИ' do
  list:
    Идеи, предложения?
    `'1' * числото =~ /някакъв регулярен израз/ ? false : true`
    `'1' * 13 =~ /^1?$|^(11+?)\1+$/ ? false : true`
    Много полезно знание :) Въпроси по израза?
    Регулярният израз тук може да се ползва 1:1 в Python за същата цел

= slide 'Документация' do
  list:
    Официална: <a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">http://www.ruby-doc.org/core-1.9.3/Regexp.html</a>
    През `ri`, например: `ri Regexp#=~`
    Мейл до Стефан със subject: `RE: <моят въпрос>`, той ще го Google-не вместо вас и ще ви върне отговор в body-то на email-а

