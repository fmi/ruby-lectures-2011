= slide 'Тези седмица' do
  list:
    Изключения
    Enumerator-и
    Организиране на програма във файлове
    RubyGems

= slide 'Три седмици в бъдещето' do
  list:
    Тест!
    Йееееееееее!
    5 декември 2011.
    30 въпроса, 60 минути.

= slide 'Четвърта задача' do
  p Имате ли коментари?

  ul
    li Решихме да пробваме нещо.
    li Какво ви хареса?
    li Какво не ви хареса?
    li Научихте ли нещо?

= slide 'Quine', 'програма, принтираща кода си' do
  example:
    ->_{_%_}["->_{_%%_}[%r]"]

= slide 'Quine', 'to the eleven' do
  example:
    v=0000;eval$s=%q~d=%!^Lcf<LK8,                  _@7gj*LJ=c5nM)Tp1g0%Xv.,S[<>YoP
    4ZojjV)O>qIH1/n[|2yE[>:ieC       "%.#%  :::##"       97N-A&Kj_K_><wS5rtWk@*a+Y5
    yH?b[F^e7C/56j|pmRe+:)B     "##%      ::##########"     O98(Zh)'Iof*nm.,$C5Nyt=
    PPu01Avw^<IiQ=5$'D-y?    "##:         ###############"    g6`YT+qLw9k^ch|K'),tc
    6ygIL8xI#LNz3v}T=4W    "#            #.   .####:#######"    lL27FZ0ij)7TQCI)P7u
    }RT5-iJbbG5P-DHB<.   "              ##### # :############"   R,YvZ_rnv6ky-G+4U'
    $*are@b4U351Q-ug5   "              #######################"   00x8RR%`Om7VDp4M5
    PFixrPvl&<p[]1IJ   "              ############:####  %#####"   EGgDt8Lm#;bc4zS^
    y]0`_PstfUxOC(q   "              .#############:##%   .##  ."   /,}.YOIFj(k&q_V
    zcaAi?]^lCVYp!;  " %%            .################.     #.   "  ;s="v=%04o;ev"%
    (;v=(v-($*+[45,  ":####:          :##############%       :   "  ])[n=0].to_i;)%
    360)+"al$s=%q#{  "%######.              #########            "  ;;"%c"%126+$s<<
    126}";d.gsub!(/  "##########.           #######%             "  |\s|".*"/,"");;
    require"zlib"||  "###########           :######.             "  ;d=d.unpack"C*"
    d.map{|c|n=(n||  ":#########:           .######: .           "  )*90+(c-2)%91};
    e=["%x"%n].pack   " :#######%           :###### #:          "   &&"H*";e=Zlib::
    Inflate.inflate(   "  ######%           .####% ::          "   &&e).unpack("b*"
    )[0];22.times{|y|   "  ####%             %###             "   ;w=(Math.sqrt(1-(
    (y*2.0-21)/22)**(;   " .###:             .#%             "   ;2))*23).floor;(w*
    2-1).times{|x|u=(e+    " %##                           "    )[y*z=360,z]*2;u=u[
    90*x/w+v+90,90/w];s[(    " #.                        "    ;y*80)+120-w+x]=(""<<
    32<<".:%#")[4*u.count((     " .                   "     ;"0"))/u.size]}};;puts\
    s+";_ The Qlobe#{" "*18+ (       "#  :#######"       ;"Copyright(C).Yusuke End\
    oh, 2010")}";exit~;_ The Qlobe                  Copyright(C).Yusuke Endoh, 2010

= slide 'Изключения' do
  list:
    Всички знаем какво са изключения.
    Нали?
    Метод за обработка на грешки.
    Позволява разделяне на обработката от останалия код.
    Все хубави неща.

= slide 'Изключенията в Ruby' do
  list:
    Накратко, двойка клас и низ.
    Съответно, тип на изключението и съобщение за грешка.
    Класовете за изключения са в йерархия.
    Два важни типа `Exception` и `StandardError`.
    <code>StandardError < Exception</code>.

= slide 'Непълна йерархия' do
  pre
    ' Object
      +-- Exception
         +-- NoMemoryError
         +-- ScriptError
         |   +-- SyntaxError
         |   +-- LoadError
         +-- SecurityError
         +-- StandardError
             +-- ArgumentError
             +-- IndexError
             |   +-- KeyError
             |   +-- StopIteration
             +-- NameError
             |   +-- NoMethorError
             +-- RuntimeError
             +-- TypeError

  p После ще видим пълната.

= slide '"вдигане" на изключения' do
  annotate:
    # Хвърля RuntimeError
    raise "'Prophet!' said I, 'Thing of evil!" #!

    # Като горното, но с различен текст
    raise RuntimeError, 'prophet still, if bird or devil!' #!

    # Друг начин да хвърлим RuntimeError
    raise RuntimeError.new('Whether tempter sent, or whether...') #!

= slide 'Хващане на изключения' do
  annotate:
    begin
      puts '...tempest tossed thee here ashore'
      raise NameError, 'Desolate yet all undaunted'
    rescue => ex
      ex.message   #=>
      ex.class     #=>
    end

= slide 'Хващане на изключения', 'хващане на конкретен тип' do
  annotate:
    begin
      raise KeyError, 'on this desert land enchanted'
    rescue ArgumentError => ex
      puts 'on this home by horror haunted'
    rescue KeyError, TypeError => ex
      ex.message  # =>
      ex.class    # =>
    end

= slide 'Какво хваща rescue?' do
  p <code>rescue</code> хваща "само" наследници на <code>StandardError</code>:
  pre
    ' Object
      +-- Exception
         +-- NoMemoryError
         +-- ScriptError<strong>
         +-- StandardError
             +-- ArgumentError
             +-- NameError
             |   +-- NoMethorError
             +-- RuntimeError</strong>

= slide 'Въпрос към вас', 'Какво ще се случи тук?' do
  example:
    begin
      raise KeyError, 'tell me truly, I implore'
    rescue IndexError => ex
      puts 'IndexError'
    rescue KeyError => ex
      puts 'KeyError'
    end

= slide 'Хващане на изключения', 'приоритет на rescue клаузите' do
  p Припомняне <code>KeyError &lt; IndexError</code>

  annotate:
    $eh = 'foo'

    begin
      raise KeyError, 'Is there - is there balm in Gilead?'
    rescue IndexError => ex
      $eh = 'index'
    rescue KeyError => ex
      $eh = 'key'
    end

    $eh    # =>

  p.action Изпълнява се първия <code>rescue</code>, за който изключението е <code>kind_of?</code> типа.


= slide 'Запомнете' do
  p Динамичните езици обикновено ползват прости правила

  list:
    "Първото отговарящо" е по-просто от "по-подходящото".
    Или от "всички отговарящи".
    Аналогичен случай с модулите.
    Два дизайн принципа: KISS и PLOA.
    Keep it simple, stupid!
    Principle of least astonishment.
    Важат с пълна сила за кода, който пишете.

= slide 'Хващане на изключения', 'ensure клауза' do
  p Кодът в <code>ensure</code> клаузата се изпълнява винаги.

  example:
    begin
      raise 'tell me - tell me, I implore!' if rand(2).zero?
    ensure
      puts '????? ??? ?????, "?????????"'
    end

  ul
    li <code>rand(2).zero?</code> връща <code>true</code> или <code>false</code>, 50 на 50.
    li Подходяща е за затваряне на ресурс, като отворен файл.
    li Някой сеща ли се какво има на мястото на въпросителните?

= slide 'Хващане на изключения', 'else клауза' do
  p <code>else</code> клаузата се изпълнява когато няма възникнало изключение.

  example:
    begin
      launch_nukes
    rescue
      puts 'Uh-oh! Something went wrong :('
    else
      puts 'War... War never changes'
    end

  list:
    Обърнете внимание, че `launch_nukes` няма удивителна.
    Дори да е опасен, няма &quot;по-безопасна&quot; версия.
    Не заслужава допълнителна пунктуация.

= slide 'begin/end in all its glory!' do
  example:
    begin
      get_a_life
    rescue NoFriendsError => ex
      puts 'Goodbye cruel world'
    rescue InsufficientVespeneGasError, NotEnoughMineralsError => ex
      puts 'I think I play too much StarCraft'
    rescue
      puts ';('
    else
      puts 'Woohoo!'
    ensure
      puts 'rm -rf ~/.history'
    end

= slide 'Хвърляне на изключение', 'по време на обработка на друго' do
  p Ако възникне изключение при обработка друго, старото се игнорира и се "вдига" новото.

  example:
    begin
      raise KeyError
    rescue
      raise TypeError
      puts "I'm a line of code, that's never executed ;("
    end

= slide 'raise в rescue' do
  p
    ' <code>raise</code> в <code>rescue</code> клауза "вдига" същото
      изключение, което се обработва.

  example:
    begin
      raise KeyError, 'But high she shoots through air and light'
    rescue
      puts 'Whoops'
      raise
    end

= slide 'begin/end', '...е израз, като всичко друго в ruby' do
  annotate:
    result = begin
      raise KeyError if rand(3).zero?
      raise NameError if rand(3).zero?
    rescue KeyError
      'nyckel'
    rescue NameError
      'namn'
    else
      'ingenting'
    end

    result    # =>

= slide 'rescue като модификатор' do
  ul
    li <code>rescue</code> може да се ползва като модификатор.
    li Ако възникне изключение, rescue връща стойността отдясно.
    li Внимавайте. Така може да хващате само <code>StandardError</code>.

  annotate:
    [].fetch(1) rescue 'baba' # =>

= slide 'Exception#exception' do
  p
    ' <code>raise type, message</code> всъщност извиква <code>type.exception(message)</code>
      за да конструира изключение.

  annotate:
    class Thing
      def exception(message)
        NameError.new(message)
      end
    end

    thing = Thing.new
    raise thing, 'whoops' #!

= slide 'Как да ползваме изключения' do
  p Може да разделим изключенията на два вида.

  ul
    li Такива, които обикновено ще хващаме с <code>rescue</code>.
    li Такива, които няма да хващаме.

  p За първите обикновено създаваме клас. За вторите обикновено ползваме <code>raise</code>.

= slide 'Кога ползваме изключения' do
  list:
    Някой ще хваща ли това изключение въобще?
    Ако не, не правете нов клас.
    Клиента може ли да предвиди дали ще възникне изключение?
    Ако да, не го принуждавайте да го ползва.
    Не принуждавайте клиента да знае за изключенията ви, освен когато нямате избор.
    Например писане по мрежата - няма как да знаете предварително.

= slide 'Разсъждения' do
  list:
    Много рядко някой иска да хване `KeyError` или `IndexError`. Защо?
    Ако пишете библиотека, помислете за базов клас на нейните изключения.
    Look Before You Leap и Better Ask Forgiveness Than Permission.
    Не ползвайте изключенията за control flow. В Ruby има друга конструкция.

= slide 'catch и throw' do
  ul
    li Сходни на <code>raise</code> и <code>rescue</code>.
    li Не ползват изключения.
    li Служат за предаване на информация по стека.

= slide 'catch и throw' do
  annotate:
    def iterate_pairs(hash)
      hash.values.each { |array| iterate_values array }
    end

    def iterate_values(array)
      array.each do |item|
        if item == 'Nemo'
          puts 'Found Nemo!'
          throw :done
        end
      end
    end

    animals = {cats: %w[Simba], fish: %w[Crispy Nemo], boars: %w[Pumba]}
    catch(:done) { iterate_pairs(animals) }

  p Този пример е доста синтетичен.

= slide 'catch и throw', 'накратко' do
  list:
    `catch` приема символ и блок.
    Нещо в блока може да извика `throw` със същия символ.
    Когато това стане, Ruby започва да търси обратно по стека до съответния `catch`.
    Когато бъде намерен, изпълнението продължава след `catch`-а.
    `throw` взема допълнителен аргумент, който е върнатата стойност на `catch`.
    Ако няма `throw`, стойността на `catch` е последния оценен израз.

= slide 'Enumerator-и' do
  p Някои методи в enumerable могат да не вземат блок.

  annotate:
    numbers = []
    1.upto(5) { |x| numbers << x }

    numbers               # =>

    other = 1.upto(5)
    other                 # =>
    other.to_a            # =>

    1.upto(5).map(&:succ) # =>

= slide 'Enumerator-и', 'нещо като итератори' do
  p Енумераторите могат да се държат като итератори.

  annotate:
    numbers = 1.upto(3)

    numbers.next   # =>
    numbers.next   # =>
    numbers.next   # =>
    numbers.next   #!

= slide 'Kernel#loop' do
  p <code>loop</code> прави безкраен цикъл. Спира на <code>StopIteration</code>.

  annotate:
    numbers = 1.upto(3)

    loop do
      puts numbers.next
    end

= slide '#with_object и #with_index' do
  p Енумераторите имат някои интересни методи.

  annotate:
    numbers = 1.upto(3)

    numbers.with_index.to_a      # =>
    numbers.with_object(:x).to_a # =>

= slide 'Object#enum_for' do
  p Може да извадите енумератор от произволен метод с <code>enum_for</code>.

  annotate:
    class Numbers
      def primes
        yield 2
        yield 3
        yield 5
        yield 7
      end
    end

    first_four_primes = Numbers.new.enum_for(:primes)
    first_four_primes.to_a     # =>
