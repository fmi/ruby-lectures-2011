= slide 'Днес' do
  list:
    Още малко за регулярни изрази — каквото остана премълчано на предишните сбирки :)
    Още малко за coding-style и конвенции в Ruby
    Отговаряме на въпроси по пета задача

= slide 'Терминология', 'припомняне от предишната лекция по темата' do
  list:
    „шаблон“, още „регулярен израз“ (pattern)
    Специални символи (meta characters)
    Екраниране на специалните символи (escape-ване)
    Повторители и повторение (quantifiers and repetition)
    Класове от символи (character classes)
    Групи

= slide 'Групи', 'и прихващане' do
  p Символите <code>(</code> и <code>)</code> се използват за логическо групиране на части от шаблона с цел:
  list:
    Контролиране областта на влияние на дадена операция
    Например, следното ще match-ва низове, съдържащи думите `day` или `dance`: `/\bda(y|nce)\b/`
    Възможност за референция към „ограденото“ в скобите — в и извън шаблона
    Задаване на по-специални (и не толкова често употребявани) конструкции

= slide 'Референции към групи' do
  p Текстът, който match-ва частта на шаблона, оградена в скоби, може да се достъпва:
  list:
    В самия шаблон, с нотацията `\1` за първата група, `\2` за втората и т.н.
    Отвън, през `MatchData`-обекта
    Отвън, през специални променливи от типа на `$1`, `$2`...
    Отвън, през локални променливи, когато групите си имат име (за това след малко)

= slide 'Именовани групи' do
  list:
    Като обикновена група, само че се обръщате към тях не с цифра, а с име
    Дефинират се така: `(?&lt;name&gt;)` или така: `(?'name')`, където `name` е името на групата
    Например: `(?&lt;date&gt;\d{4}-\d{2}-\d{2})`
  div.action
    annotate:
      /(?<date>\d{4}-\d{2}-\d{2})/.match 'Today is 2011-11-08, Tuesday.' # =>

= slide 'Референции към групи', 'в рамките на шаблона' do
  list:
    `\1`, `\2` и прочее, ако групите ви не са именовани
    Ако имате повече от 9 групи, можете да ги реферирате по същия начин:
    `\11` се обръща към 11-тата група
    Ами ако искам да кажа: "текстът, отговарящ на група `\1`, последван от символа `1`"?
    Ползвате следния общ синтаксис: `\k&lt;group_identifier&gt;`, където `group_identifier` е число или име на група
    Този общ синтаксис се използва и за обръщение към текста, отговарящ на именовани групи:
    `/(?&lt;word&gt;\w+), \k&lt;word&gt;/`

= slide 'Примери за референции към групи' do
  example:
    /(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/.match 'Today is 2011-11-08, Tuesday.'
    # #<MatchData "2011-11-08" year:"2011" month:"11" day:"08">

    /(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)\11/.match 'Regular expressions'
    # #<MatchData "ular express" 1:"u" 2:"l" 3:"a" 4:"r" 5:" " 6:"e" 7:"x" 8:"p" 9:"r" 10:"e" 11:"s">
    /(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)\k<11>1/.match 'Regular express1ions'
    # #<MatchData "ular express1" 1:"u" 2:"l" 3:"a" 4:"r" 5:" " 6:"e" 7:"x" 8:"p" 9:"r" 10:"e" 11:"s">

  list:
    Забележете, че в рамките на един шаблон <strong>не може</strong> да ползвате и двата вида рефериране към групи

= slide 'Уточнение относно референциите', 'в рамките на шаблона' do
  list:
    Обърнете внимание, че референцията е към порцията текст, match-нат от групата, а не към самата група!
    Например:
  div.action
    annotate:
      /(\w+), \1/.match 'testing, testing' # =>
      /(\w+), \1/.match 'testing, twice'   # =>

      /(?<word>\w+), \k<word>/.match 'testing, testing' # =>

= slide 'Рекурсивни групи' do
  list:
    Ако вместо порцията текст, отговаряща на дадена група, искате да преизпълните групата?
    Ползвате следния синтаксис: `\g&lt;name&gt;`, където `name` е номер или име на група в шаблона
    Това <strong>преизпълнява</strong> шаблона, не търси за вече намерения текст
    Има смисъл за да направи шаблоните ви една идея по-DRY
    Например:
  div.action
    annotate:
      /(\w+), \1/.match    'testing, twice'   # =>
      /(\w+), \g<1>/.match 'testing, twice'   # =>

= slide 'Рекурсивни групи', 'втора част' do
  list:
    С помощта на горното можете да дефинирате рекурсивни групи
    Спомняте ли си втория проблем, който поставихме в началото?
  blockquote.action
    | Да валидирате изрази от следния тип за правилно отворени/затворени скоби:
    list:
      `(car (car (car ...)))`
      Например: `(car (car (car (car list))))`
      Целта е израз, чиито резултат да може да се ползва в условен оператор (`true`/`false`-еквивалент)
      Можете да ползвате произволни методи от класа `Regexp`
      И регулярен израз, разбира се

= slide 'Примерно решение', 'с рекурсивни групи' do
  annotate:
    validator = /^(\(car \g<1>*[\w]*\))*$/

    valid   = '(car (car (car (car list))))'
    invalid = '(car (car (car list))'

    validator.match(valid) ? true : false   # =>
    validator.match(invalid) ? true : false # =>

= slide 'Look-ahead и look-behind' do
  list:
    Положителен look-ahead: `/(?=pattern)/`
    Отрицателен look-ahead: `/(?!pattern)/`
    Положителен look-behind: `/(?&lt;=pattern)/`
    Отрицателен look-behind: `/(?&lt;!pattern)/`
    Пример:
  div.action
    annotate:
      /(?<=<b>)\w+(?=<\/b>)/.match("Fortune favours the <b>bold</b>") # =>

= slide 'Работа с MatchData-обекти' do
  list:
    Това е обектът, който ви връща `Regexp#match`
    Това е обектът, стоящ зад специалната променлива `$~`
    Същият обект се крие и зад `Regexp.last_match`
    Не е `Enumerable`

= slide 'Най-полезни методи на MatchData-обектите' do
  list:
    `MatchData#[група]`, където `група` е номер или име на група, ви връща порцията текст, отговаряща на съответната група
    `MatchData#begin(група)` пък ви връща число — отместването спрямо началото на низа на порцията текст, отговаряща на съответната група
    Пример:
  div.action
    annotate:
      /(\w+)/.match('Some words')[1]              # =>
      /(\w+)/.match('Some words').begin(1)        # =>
      /(?<id>\d+)/.match('ID: 12345')[:id]        # =>
      /(?<id>\d+)/.match('ID: 12345').begin(:id)  # =>

= slide '#pre_match и #post_match методи', 'на MatchData-обектите' do
  list:
    `MatchData#pre_match` (същото като специалната променлива <code>$`</code>) — текстът преди съвпадението
    `MatchData#post_match` (същото като специалната променлива <code>$'</code>) — текстът след съвпадението
    Пример:
  div.action
    annotate:
      match = /(?<number>\d+)/.match 'ID: 12345 (new)'

      match[:number]    # =>
      match.pre_match   # =>
      match.post_match  # =>

= slide 'Специални променливи' do
  list:
    `$~`, `$'`, `$1`, `$2`, `$3` и прочее
    Не са глобални променливи, а специални (не са глобално-видими)
    Попълват се с резултата от последно изпълнения `match`
    Не само след явно извикване на `Regexp#match`

= slide 'if с регулярни изрази' do
  list:
    `=~` и `!~` — дефинирани в `Regexp` и в `String`
    Можем да правим така: `/pattern/ =~ 'Some string'`
    Както и така: `'Some string' =~ /pattern/`
    Връща `nil`, ако няма съвпадение, или число (offset), ако има такова
    След изпълнение на този оператор също имаме попълнени специални променливи
    Удобно е да се ползва в условни конструкции, например `if`

= slide 'if с регулярни изрази', 'пример' do
  annotate:
    log_entry = "[2011-07-22 15:42:12] - GET / HTTP/1.1 200 OK"

    if log_entry =~ /\bHTTP\/1.1 (\d+)/
      request_status = $1.to_i # =>
    else
      raise "Malformed log entry!"
    end

= slide 'case с регулярни изрази', 'работи благодарение на ===' do
  example:
    html = '<h1>Header</h1>' # или:
    html = '<img src="http://my/image.src" alt="Kartman Makes Burgers" />'

    case html
    when /(<h(\d)>)(.+)<\/h\2>/                       then {header: $3, size: $2}
    when /<a\s+href="([^"]+)">([^<]+)<\/a>/           then {url: $1, text: $2}
    when /<img\s+src="([^"]+)"\s+alt="([^"]+)"\s*\/>/ then {image: $1, alt: $2}
    else                                                   'unrecognized tag'
    end

    # {:image=>"http://my/image.src", :alt=>"Kartman Makes Burgers"}

= slide 'Методи в String', 'свързани с регулярни изрази' do
  list:
    `String#match`
    `String#=~` и `String#!=`
    `String#sub`, `String#gsub` и вариантите им с `!`
    `String#[]` и `String#slice` - в някои от вариантите си приемат регулярен израз
    `String#index` и `rindex` приемат и регулярен израз
    `String#partition` и `rpartition` и <a href="http://www.ruby-doc.org/core-1.9.3/String.html">други...</a>

= slide 'Пример със String#gsub', 'плюс групи и блок' do
  example:
    'SomeTitleCase'.gsub /(^|[[:lower:]])([[:upper:]])/ do
      [$1, $2.downcase].reject(&:empty?).join('_')
    end

    # "some_title_case"

= slide 'Unicode' do
  list:
    Регулярните изрази в Ruby 1.9 носят кодировката на сорс-кода; ако кодът е UTF-8, и те са UTF-8
    Можете да проверите кодировката на даден регулярен израз с `Regexp#encoding`
    Можете да укажете изрична кодировка посредством модификатор; например `/something/u` за `UTF-8`
    Малък пример:
  blockquote.action
    | Rubyのお父さんはまつもとゆきひろさんです。
  div.action
    annotate:
      unicode_test = 'Rubyのお父さんはまつもとゆきひろさんです。'

      /は[[:alpha:]]+さん/.match unicode_test # #<MatchData "はまつもとゆきひろさん">

= slide 'Граници на думи в Unicode-текст' do
  list:
    `\b` в Unicode-текст работи, когато границата на думата е лесно определима
    Например, това ще работи: `/\b[[:alpha:]]\b/.match 'това и онова' # #&lt;MatchData "и"&gt;`
    Горното работи, понеже думата на кирилица е оградена от интервали
    В някои езици, обаче, няма интервали (whitespace) между думите (например китайски, японски)
    Къде са границите на думите в това изречение: `Rubyのお父さんはまつもとゆきひろさんです。`?

= slide 'Граници на думи в Unicode-текст', 'пример' do
  p Например:
  div.action
    example:
      'Ruby no otousan ha Matsumoto Yukihiro san desu.'.gsub(/(\b[[:alpha:]]+\b)/) { "[#{$1}]" }
      # "[Ruby] [no] [otousan] [ha] [Matsumoto] [Yukihiro] [san] [desu]."

  p.action Но:
  div.action
    example:
      'Rubyのお父さんはまつもとゆきひろさんです。'.gsub(/(\b[[:alpha:]]+\b)/) { "[#{$1}]" }
      # "[Rubyのお父さんはまつもとゆきひろさんです]。"

= slide 'Флагове на шаблоните' do
  list:
    Можете да управлявате някои аспекти от поведението на шаблона посредством флагове
    Указват се след края на шаблона, например: `/pattern/flags`
    `i` прави търсенето на съвпадение нечувствително към регистъра на буквите
    `u` кара шаблона да носи задължителна кодировка `UTF-8`
    `m` превръща шаблона в multiline-такъв (в този режим, например, `.` ще съвпада и с нов ред)
    Има и други, които не се ползват толкова често

= slide 'Документация' do
  list:
    `Regexp`: <a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">http://www.ruby-doc.org/core-1.9.3/Regexp.html</a>
    `MatchData`: <a href="http://www.ruby-doc.org/core-1.9.3/MatchData.html">http://www.ruby-doc.org/core-1.9.3/MatchData.html</a>
    През `ri`, например: `ri Regexp#=~`
    Мейл до Стефан със subject: `RE: <моят въпрос>`, той ще го Google-не вместо вас и ще ви върне отговор в body-то на email-а

= slide 'Част втора', 'Ruby-стил' do
  p Следващите слайдове са базирани основно на код, видян в първия ви опит да решите трета задача

= slide 'Skeptic' do
  list:
    Някои от вас изразяват скептицизъм относно Skeptic
    Полезно е — в ограниченията се ражда оригинален код
    И ние се учим с ограниченията, които ви даваме — вероятно е за следващи задачи да ги променяме
    Skeptic не брои празни редове — оставяйте ги за четимост

= slide 'Константи и имена на класове' do
  list:
    В Ruby всичко, което започва с главна буква, е константа
    Имената на класове са константи, но се пишат с `UpperCamelCase` <strong>по конвенция</strong>
    Обикновени константи, които ползвате в даден клас/модул, се пишат със `SCREAMING_SNAKE_CASE` <strong>по конвенция</strong>

= slide 'Класови методи' do
  list:
    За това ще си говорим още в бъдещ момент, но:
    Когато декларирате класови методи, не ползвайте `def MyClass.my_method`
    Вместо това ползвайте `def self.my_method`

= slide 'Kernel#sprintf и String#%' do
  list:
    Не ползвайте `Kernel#sprintf`; вместо това има `String#%`, т.е.:
    Не: `sprintf("| %-44s%2s | %8.2f |\n", @label, @quantity.to_s, calculate)`
    По-добре: `"| %-44s%2s | %8.2f |\n" % [@label, @quantity.to_s, calculate]`

= slide 'Без излишни скоби' do
  list:
    Избягвайте излишните скоби — в изрази, при дефиниране/извикване на функции и прочее; например:
    Не: `(@cart.coupon) ? @cart.coupon.calc_price : @cart.without_coupon`
    Не: `(discounted > 0) ? -discounted * @product.price * @percent * '0.01'.to_d : 0`
    Да: `@cart.coupon ? @cart.coupon.calc_price : @cart.without_coupon`
    Да: `discounted > 0 ? -discounted * @product.price * @percent * '0.01'.to_d : 0`
    Изобщо: тези изрази са малко трудно четими за тернари оператори, по-добре `if`-`else`

= slide 'Whitespace', 'ich bin eine whitespace nazi' do
  list:
    Нови редове: между дефиниции на методи в клас
    Между дефинициите на класове/модули
    След блока с `require`-директиви
    Преди израза, връщан от дадена функция, ако функцията не е едноредова
    `@@promotion_list=[:get_one_free ,:package ,:threshold]` — noooo...

= slide 'Whitespace', 'OMG идентация...' do
  img src="http://dl.dropbox.com/u/2664150/Screenshots/fahhs6xpbk-f.png" alt="OMG Indentation"

= slide 'Излишни неща' do
  list:
    Без `return` на последния ред на метод
    Самостоятелни `if not` са по-известни като `unless`
    `private # Private` — можете повече!
    Без `then` в стандартни `if`-конструкции; например, избягвайте това:
  div.action
    example:
      if (10...20).include?(cardinal) then
        something...
      end

= slide 'Странен код', 'серия първа' do
  p Не:
  example:
    if not promotion.empty?
      new_promo.promo[new_product] = promotion.to_a
      make_promoted(new_product)
      else has_promotion[new_product] = false
    end
  div.action
    p Поне да е нещо такова:
    example:
      if promotion.empty?
        has_promotion[new_product] = false
      else
        new_promo.promo[new_product] = promotion.to_a
        make_promoted(new_product)
      end

= slide 'Странен код' do
  p Не ползвайте <code>unless</code> с <code>else</code>! Ако ви се налага, ползвайте <code>if</code>-<code>else</code>
  p Плюс това, идентация...
  example:
    unless inventory.new_promo.promo[product].kind_of? Hash
      inventory.new_promo.get_one_free(product, one_s_price, quantity, value)
    else inventory.new_promo.promo_type(product, one_s_price, quantity, pack, value)
    end

= slide 'Странен код', 'серия втора, част първа' do
  p Ох...
  example:
    def execute(amount,price)
      return calculate_get_one_free(amount,price) if @name == :get_one_free

      return calculate_package(amount,price) if @name == :package

      return calculate_threshold(amount,price) if @name == :threshold

    end

  div.action
    p Ма-а-алко по-добре:
    example:
      def execute(amount, price)
        case @name
        when :get_one_free then calculate_get_one_free(amount, price)
        when :package      then calculate_package(amount, price)
        when :threshold    then calculate_threshold(amount, price)
        end
      end

= slide 'Странен код', 'серия втора, част втора (става касова продукция...)' do
  div.action
    p Или пък:
    example:
      def execute(amount, price)
        send "calculate_#{@name}", amount, price
      end
  p.action За това ще си говорим по-нататък; не е непременно добра практика :)

= slide 'Странен код', 'вече е трилогия' do
  example:
    class ShopCar

      def shop_car()
        @shop_car = {}
      end

  list:
    Именоване, именоване, именоване, именоване... `ShopCar`!?
    Без празен ред между дефиницията на метода и `class MyClass`
    Без кръгли скоби около дефиницята на метода; той дори няма аргументи...
    Радваме се, че въпреки странните имена, поне сте консистентни: `@shop_car = ...` :)

= slide 'Странен код', 'Доктор "Ох, боли ме сърцето..."' do
  list:
    `cena = total`
  div.action
    example:
      t = '0.00'.to_d
      helper = inventory.all_coupons[name_of_coupon]
      t = helper[0] == :percent ? cpn.percent(cena, helper[1]) : cpn.amount(cena, helper[1])
      # съжалявам за съкращенията, но трябваше да се сместя в sceptic
  p.action Можете повече, вярваме във вас :)

= slide 'Странен код' do
  example:
    def function(w, x, y, z)
      - ( ( ( w - x ) * y.to_d ) * ( z / 100 ))
    end
  p.action Keeewl... А какво точно правеше този метод? Хм...

= slide 'Странен код' do
  example:
    class Numeric
      def ordinal
        cardinal = self.to_i.abs
        if (10...20).include?(cardinal) then
          cardinal.to_s << 'th'
        else
          cardinal.to_s << %w{th st nd rd th th th th th th}[cardinal % 10]
        end
      end
    end
  list:
    Внимателно с moneky-patch-ването; в Ruby е опасно лесно
    `cardinal.to_s << %w{th st nd rd th th th th th th}[cardinal % 10]`? Интересно, но...
    Как не ви изсъхват пръстите да пишете `th`, `th`, `th`, ...

= slide 'Странен код', 'не така' do
  example:
    def package(product, one_s_price, quantity, pack, value)
      out_of_pack = quantity % pack
      if  promo[product].has_key?(:package) and quantity >= pack
        return function(quantity, out_of_pack, one_s_price, value)
        else return '0.00'.to_d
      end
    end

= slide 'Странен код', 'малко по-добре е така' do
  example:
    def package(product, one_s_price, quantity, pack, value)
      out_of_pack = quantity % pack

      if promo[product].has_key?(:package) and quantity >= pack
        a_better_named_function(quantity, out_of_pack, one_s_price, value)
      else
        '0.00'.to_d
      end
    end

= slide 'Владеене на езика' do
  list:
    Необходимо е да се стараете не само в Ruby (или изобщо в програмните езици), но и в майчиния си език
    Бъдете консистентни — коментари и на български, и на английски не са добра идея
    `raise 'Give me a name, not a novell!' if item_name.length > 40` — <em>novel</em> се пише с едно <strong>l</strong>


= slide 'Coding-style Guide в Ruby', 'произведение на г-н Бацов и с-ие' do
  list:
    Хвърлете едно око на този <a href="https://github.com/bbatsov/ruby-style-guide#readme">неофициален guide за стил на кода в Ruby</a>
    Не сме 100% съгласни с този guide, но в голямата си част ще ви е полезен
    С всеки изписан символ код, се замислете дали ще се чете лесно и разбере лесно от средностатистическия член на вашия екип
    Ако пишете код сам, трябва да си налагате още по-тежки ограничения — ще се благославяте след месец, месец и нещо...
    Успех! :)

